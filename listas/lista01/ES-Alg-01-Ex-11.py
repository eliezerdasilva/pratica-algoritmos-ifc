'''
Dist√¢ncia entre dois pontos na terra. A terra √© curva (a n√£o ser para os terraplanistas! üò±) e 
a dist√¢ncia entre graus de longitude (leste-oeste) varia conforme a latitude (norte-sul). Com 
isso, encontrar a dist√¢ncia entre dois pontos na superf√≠cie da terra √© mais complicado do 
simplesmente usar o Teorema de Pit√°goras no plano. Seja  e  as latitudes e 
longitudes de dois pontos na superf√≠cie da terra. A dist√¢ncia em quil√¥metros entre estes dois 
pontos ao longo da superf√≠cie da terra √© dada por: 

dista n ci a = 6371.01 √óar ccos(sen(t1) √ósen(t2) + cos(t1) √ócos(t2) √ócos(g1 ‚àíg2)) 

Crie um programa Python que receba a latitude e a longitude de dois pontos na Terra em 
graus, calcule e exiba a dist√¢ncia entre eles em quil√¥metros ao longo da superf√≠cie

Observa√ß√£o: as fun√ß√µes trigonom√©tricas do Python operam em radianos (e n√£o em graus). 
Com isso, voc√™ vai precisar converter os dados de graus para radianos antes de calcular a 
dist√¢ncia. O m√≥dulo matem√°tico do Python cont√©m uma fun√ß√£o chamada radians, que faz 
esta convers√£o.
Observa√ß√£o: voc√™ pode usar a fun√ß√£o log10 do m√≥dulo math para calcular o pen√∫ltimo 



'''
import math

lat1 = float(input("Digite a latitude do primeiro ponto em graus: "))
lon1 = float(input("Digite a longitude do primeiro ponto em graus: "))
lat2 = float(input("Digite a latitude do segundo ponto em graus: "))
lon2 = float(input("Digite a longitude do segundo ponto em graus: "))

''''
? 
'''
lat1 = lat1 * math.pi / 180
lon1 = lon1 * math.pi / 180
lat2 = lat2 * math.pi / 180
lon2 = lon2 * math.pi / 180

raio_terra = 6371.01


delta_lat = lat2 - lat1
delta_lon = lon2 - lon1

a = (math.sin(delta_lat / 2) ** 2) + math.cos(lat1) * math.cos(lat2) * (math.sin(delta_lon / 2) ** 2)
c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
distancia = raio_terra * c


print("A dist√¢ncia entre os pontos √© de", round(distancia, 2), "quil√¥metros.")
